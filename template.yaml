AWSTemplateFormatVersion: 2010-09-09
Description: ---
Parameters: 
  Amzn2Latest:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2
  DomainName:
    Type: String
    Default: http2.tak1wa.com
  HostedZoneId: 
    Type: String
    Default: Z07463711IS7W792VK625

Resources:
  ##############
  # VPCs
  ##############
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.10.0/24
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.11.0/24
      VpcId: !Ref VPC
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  ProtectedSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.20.0/24
      VpcId: !Ref VPC
  ProtectedSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProtectedSubnet1
      RouteTableId: !Ref ProtectedRouteTable1
  ProtectedSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.21.0/24
      VpcId: !Ref VPC
  ProtectedSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ProtectedSubnet2
      RouteTableId: !Ref ProtectedRouteTable2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNatGateway1.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EipNatGateway2.AllocationId
      SubnetId: !Ref PublicSubnet2
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  ProtectedRouteTable1:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC    
  ProtectedRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  ProtectedRouteTable2:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC    
  ProtectedRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ProtectedRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  EipNatGateway1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EipNatGateway2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ##############
  # DNS
  ##############
  PublicAlbCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
      ValidationMethod: DNS
  PublicAlbDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt PublicLoadBalancer.DNSName
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID

  ##############
  # ALB1
  ##############
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internet-facing"
      Name: !Sub ${AWS::StackName}-web-alb
      IpAddressType: ipv4
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref PublicAlbServerSecurityGroup
      LoadBalancerAttributes:
        - Key: routing.http2.enabled
          Value: 'true'
  PublicListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicTargetGroup
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref PublicAlbCertificate
  PublicTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-web-tg
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      HealthCheckEnabled: true
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: '200'
      VpcId: !Ref VPC
      TargetType: ip
      # Targets:
      #   - Id: !Ref PrivateLoadBalancer
  PublicAlbServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: !Sub ${AWS::StackName}-web-alb-sg
        GroupName: !Sub ${AWS::StackName}-web-alb-sg
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0

  ##############
  # ALB2
  ##############
  PrivateLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internal"
      Name: !Sub ${AWS::StackName}-internal-alb
      IpAddressType: ipv4
      Subnets: 
        - !Ref ProtectedSubnet1
        - !Ref ProtectedSubnet2
      SecurityGroups: 
        - !Ref PrivateAlbServerSecurityGroup
      LoadBalancerAttributes:
        - Key: routing.http2.enabled
          Value: 'false'
  PrivateListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PrivateTargetGroup
      LoadBalancerArn: !Ref PrivateLoadBalancer
      Port: 80
      Protocol: HTTP
  PrivateTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-internal-tg
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      HealthCheckEnabled: true
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: '200'
      VpcId: !Ref VPC
      TargetType: instance
      Targets:
        - Id: !Ref WebServer
  PrivateAlbServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub ${AWS::StackName}-internal-alb-sg
      GroupName: !Sub ${AWS::StackName}-internal-alb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicAlbServerSecurityGroup

  ##############
  # EC2
  ##############
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 8
            DeleteOnTermination: true
            Encrypted: true
      SubnetId: !Ref ProtectedSubnet1
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      ImageId: !Ref Amzn2Latest
      IamInstanceProfile: !Ref WebProfile
      DisableApiTermination: false
      EbsOptimized: true
      UserData: 
        Fn::Base64: |
            #cloud-config
            package_update: true
            package_upgrade: true
            runcmd:
            - yum update -y
            - yum install httpd -y
            - service httpd start
            - chkconfig httpd on
            - echo "hoge" > /var/www/html/index.html
            write_files:
            - path: /var/www/html/index.html
              permissions: 0644
              owner: root
              content: |
                hoge.html
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "hoge"
      GroupName: hoge-web-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PrivateAlbServerSecurityGroup
  WebProfile: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref WebRole
      InstanceProfileName: !Sub ${AWS::StackName}-web-profile
  WebRole:
    Type: "AWS::IAM::Role"
    Properties:
        Path: "/"
        RoleName: !Sub ${AWS::StackName}-web-role
        AssumeRolePolicyDocument: 
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"

Outputs:
  PublicAlbDNSName:
    Value: !GetAtt PublicLoadBalancer.DNSName